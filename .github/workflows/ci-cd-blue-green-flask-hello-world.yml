name: CI CD Workflow with blue-green strategy using GKE and DockerHub

on:
  push:
    branches: [ master ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: demo-cluster-1
  GKE_ZONE: us-central1-c
  DEPLOYMENT_NAME: flask-hello-world
  IMAGE: flask_hello_world
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  NAMESPACE: default

jobs:

  build:
    name: Build image and push it to DockerHub
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up python interpreter
      uses: actions/setup-python@v2
      with:
        python-version: "3.7"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: pytest

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        context: ./app
        file: ./app/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE }}:latest, ${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE }}:${{ github.sha }}

  deploy:
    name: Deploy image to GKE
    runs-on: ubuntu-latest
    needs: build

    steps:

    - name: Check out code
      uses: actions/checkout@v2

    - name: Getting the GKE credentials
      uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    - name: Set up Kustomize
      run: |-
        cd k8s/
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    - name: Create namespace & set in Kustomize
      run: |-
        namespacesPresent=`kubectl get ns | grep -e flask-hello-world-* | wc -l`
        echo $namespacesPresent
        if [ $namespacesPresent -eq 0 ]
        then
          kubectl create ns flask-hello-world-1
          cd k8s
          kustomize edit set namespace flask-hello-world-1
          echo "NAMESPACE=flask-hello-world-1" >> $GITHUB_ENV
        elif [ $namespacesPresent -eq 1 ]
        then
          echo "Apdating app"
          maxNameSpaceVersion=`kubectl get ns | grep -e \d+$`
          newNameSpaceVersion=`$maxNameSpaceVersion + 1`
          echo "$maxNameSpaceVersion | $newNameSpaceVersion"
          kubectl create ns flask-hello-world-$newNameSpaceVersion
          cd k8s
          kustomize edit set namespace flask-hello-world-$newNameSpaceVersion
          echo "NAMESPACE=flask-hello-world-$newNameSpaceVersion" >> $GITHUB_ENV
          echo "OLD_NAMESPACE=flask-hello-world-$maxNameSpaceVersion" >> $GITHUB_ENV
        else
          echo "Two or more namespaces are present! Exiting"
          exit 1
        fi

    - name: Do a kustomization
      run: |-
        cd k8s/
        kustomize edit set namespace $NAMESPACE
        ./kustomize edit set image flask-hello-world=$DOCKERHUB_USER/$IMAGE:$GITHUB_SHA
        cat kustomization.yaml
      
    - name: Deploy app to GKE
      run: |-
        cd k8s/
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME --namespace $NAMESPACE
        kubectl get services -o wide --namespace $NAMESPACE

    - name: Remove old namespace
      run: |
        namespacePresentOld=`kubectl get ns | grep ${{ env.OLD_NAMESPACE }} | wc -l`
        if [ $namespacePresentOld -eq 1 ]
        then
          kubectl delete ns ${{ env.OLD_NAMESPACE }} --wait=true
        fi

    - name: Commit files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git commit -am "Update docker tag"
        
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }} 

    